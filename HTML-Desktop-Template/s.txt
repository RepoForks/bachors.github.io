<!DOCTYPE html>
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
		<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<style>#url {
	width: 70%
}
#render {
	width: 100%;
	height: 800px;
	border: none
}</style>
	</head>
	<body>
		Url: <input type="text" id="url" value="http://stackoverflow.com/"/>
<input type="button" id="btnSave" value="Save PNG"/>

<iframe id="render"></iframe>

<script type="text/javascript" src="//code.jquery.com/jquery-2.1.1.min.js"></script>
<script>
/***********************************************
 * Example by iBacor 2016.
 * http://ibacor.com/demo/jquery-web-screenshot
 * Updates will be posted to this site.
 
 * Built with:
 - YQL
 - jQuery
 - Html2Canvas
 - Canvas2Image
 - Locutus
***********************************************/

// YQL
function sendRequest(a, b) {
    if (window.XMLHttpRequest) {
        xhttp = new XMLHttpRequest()
    } else {
        xhttp = new ActiveXObject("Microsoft.XMLHTTP")
    }
    xhttp.open("GET", 'https://query.yahooapis.com/v1/public/yql?q=' + encodeURIComponent('SELECT content FROM data.headers WHERE url="' + a + '" and ua="' + b + '"') + '&format=xml&env=store://datatables.org/alltableswithkeys', false);
    xhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhttp.send();
    var d = xhttp.responseXML;
    var x = d.getElementsByTagName('content');
    var e = x[0].innerHTML;
    var f = e.replace(/\&lt\;script/g, '&lt;!--&lt;script');
    var c = f.replace(/\&lt\;\/script\&gt\;/g, '&lt;/script&gt;--&gt;');
    return html_entity_decode(c)
}
// http://locutus.io/php/
function html_entity_decode(a, b) {
    var c = {},
        symbol = '',
        tmp_str = '',
        entity = '';
    tmp_str = a.toString();
    if (false === (c = this.get_html_translation_table('HTML_ENTITIES', b))) {
        return false
    }
    delete(c['&']);
    c['&'] = '&amp;';
    for (symbol in c) {
        entity = c[symbol];
        tmp_str = tmp_str.split(entity).join(symbol)
    }
    tmp_str = tmp_str.split('&#039;').join("'");
    return tmp_str
}
// http://locutus.io/php/
function get_html_translation_table(a, b) {
    var c = {},
        hash_map = {},
        decimal;
    var d = {},
        constMappingQuoteStyle = {};
    var e = {},
        useQuoteStyle = {};
    d[0] = 'HTML_SPECIALCHARS';
    d[1] = 'HTML_ENTITIES';
    constMappingQuoteStyle[0] = 'ENT_NOQUOTES';
    constMappingQuoteStyle[2] = 'ENT_COMPAT';
    constMappingQuoteStyle[3] = 'ENT_QUOTES';
    e = !isNaN(a) ? d[a] : a ? a.toUpperCase() : 'HTML_SPECIALCHARS';
    useQuoteStyle = !isNaN(b) ? constMappingQuoteStyle[b] : b ? b.toUpperCase() : 'ENT_COMPAT';
    if (e !== 'HTML_SPECIALCHARS' && e !== 'HTML_ENTITIES') {
        throw new Error('Table: ' + e + ' not supported');
    }
    c['38'] = '&amp;';
    if (e === 'HTML_ENTITIES') {
        c['160'] = '&nbsp;';
        c['161'] = '&iexcl;';
        c['162'] = '&cent;';
        c['163'] = '&pound;';
        c['164'] = '&curren;';
        c['165'] = '&yen;';
        c['166'] = '&brvbar;';
        c['167'] = '&sect;';
        c['168'] = '&uml;';
        c['169'] = '&copy;';
        c['170'] = '&ordf;';
        c['171'] = '&laquo;';
        c['172'] = '&not;';
        c['173'] = '&shy;';
        c['174'] = '&reg;';
        c['175'] = '&macr;';
        c['176'] = '&deg;';
        c['177'] = '&plusmn;';
        c['178'] = '&sup2;';
        c['179'] = '&sup3;';
        c['180'] = '&acute;';
        c['181'] = '&micro;';
        c['182'] = '&para;';
        c['183'] = '&middot;';
        c['184'] = '&cedil;';
        c['185'] = '&sup1;';
        c['186'] = '&ordm;';
        c['187'] = '&raquo;';
        c['188'] = '&frac14;';
        c['189'] = '&frac12;';
        c['190'] = '&frac34;';
        c['191'] = '&iquest;';
        c['192'] = '&Agrave;';
        c['193'] = '&Aacute;';
        c['194'] = '&Acirc;';
        c['195'] = '&Atilde;';
        c['196'] = '&Auml;';
        c['197'] = '&Aring;';
        c['198'] = '&AElig;';
        c['199'] = '&Ccedil;';
        c['200'] = '&Egrave;';
        c['201'] = '&Eacute;';
        c['202'] = '&Ecirc;';
        c['203'] = '&Euml;';
        c['204'] = '&Igrave;';
        c['205'] = '&Iacute;';
        c['206'] = '&Icirc;';
        c['207'] = '&Iuml;';
        c['208'] = '&ETH;';
        c['209'] = '&Ntilde;';
        c['210'] = '&Ograve;';
        c['211'] = '&Oacute;';
        c['212'] = '&Ocirc;';
        c['213'] = '&Otilde;';
        c['214'] = '&Ouml;';
        c['215'] = '&times;';
        c['216'] = '&Oslash;';
        c['217'] = '&Ugrave;';
        c['218'] = '&Uacute;';
        c['219'] = '&Ucirc;';
        c['220'] = '&Uuml;';
        c['221'] = '&Yacute;';
        c['222'] = '&THORN;';
        c['223'] = '&szlig;';
        c['224'] = '&agrave;';
        c['225'] = '&aacute;';
        c['226'] = '&acirc;';
        c['227'] = '&atilde;';
        c['228'] = '&auml;';
        c['229'] = '&aring;';
        c['230'] = '&aelig;';
        c['231'] = '&ccedil;';
        c['232'] = '&egrave;';
        c['233'] = '&eacute;';
        c['234'] = '&ecirc;';
        c['235'] = '&euml;';
        c['236'] = '&igrave;';
        c['237'] = '&iacute;';
        c['238'] = '&icirc;';
        c['239'] = '&iuml;';
        c['240'] = '&eth;';
        c['241'] = '&ntilde;';
        c['242'] = '&ograve;';
        c['243'] = '&oacute;';
        c['244'] = '&ocirc;';
        c['245'] = '&otilde;';
        c['246'] = '&ouml;';
        c['247'] = '&divide;';
        c['248'] = '&oslash;';
        c['249'] = '&ugrave;';
        c['250'] = '&uacute;';
        c['251'] = '&ucirc;';
        c['252'] = '&uuml;';
        c['253'] = '&yacute;';
        c['254'] = '&thorn;';
        c['255'] = '&yuml;'
    }
    if (useQuoteStyle !== 'ENT_NOQUOTES') {
        c['34'] = '&quot;'
    }
    if (useQuoteStyle === 'ENT_QUOTES') {
        c['39'] = '&#39;'
    }
    c['60'] = '&lt;';
    c['62'] = '&gt;';
    for (decimal in c) {
        if (c.hasOwnProperty(decimal)) {
            hash_map[String.fromCharCode(decimal)] = c[decimal]
        }
    }
    return hash_map
}

var domain = '';

$(function() {
	var c = document.getElementById('render');
    var b = c.contentDocument || c.contentWindow.document || c.contentWindow || c.contentDocument.document;
    var d = "#Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.154 Safari/537.36";
    $("#btnSave").click(function() {
        var url_target = $("#url").val();
		domain = url_target.split("/")[2];
		var e = sendRequest(url_target, d);
		
        $('body', $(b)).html(e);
    });
	
	$('body', $(b)).on('click', 'a', function() {
		var url_target = pull_url($(this).attr('href'));
		var e = sendRequest(url_target, d);
		
		$("#url").val(url_target);
		
        $('body', $(b)).html(e);
		return false;
    });
});

	function pull_url(url)
    {
		var fixurl = '';
        if (url.match(/^http/)) {
            fixurl = url;
        } else if (url.match(/^\/\//)) {
			fixurl = 'http:' + url;
		} else {
            var no = url.indexOf('..');
            if (no == 0) {
                if (url.substr(0, 2) == '//') {
                    fixurl = 'http:' + url;
                } else if (url.substr(0, 1) == '/') {
                    fixurl = domain + url;
                } else {
                    fixurl = domain + '/' + url;
                }
            } else {
                fixurl = domain + url;
            }
        }
        return fixurl;
    }
</script>
	</body>
</html>